{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  // Ensure OPTIONS requests are properly handled\n  if (config.method === 'options') {\n    config.headers['Access-Control-Request-Method'] = 'GET,POST,PUT,DELETE,OPTIONS';\n    config.headers['Access-Control-Request-Headers'] = 'Content-Type,Authorization';\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport const apiService = {\n  // Auth related\n  setAuthToken(token) {\n    if (token) {\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  },\n  // Symptoms\n  async getSymptoms() {\n    const response = await api.get('/symptoms/');\n    return response.data;\n  },\n  // Diseases\n  async getDiseases() {\n    const response = await api.get('/diseases/');\n    return response.data;\n  },\n  // Predictions\n  async predictDisease(symptoms, additionalSymptoms = '', notes = '') {\n    const response = await api.post('/predict/', {\n      symptoms,\n      additional_symptoms: additionalSymptoms,\n      notes\n    });\n    return response.data;\n  },\n  async getPredictions() {\n    const response = await api.get('/predictions/');\n    return response.data;\n  },\n  // Dashboard\n  async getDashboard() {\n    const response = await api.get('/dashboard/');\n    return response.data;\n  },\n  // Health Records\n  async getHealthRecords() {\n    const response = await api.get('/health-records/');\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","withCredentials","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","method","error","Promise","reject","apiService","setAuthToken","setItem","removeItem","getSymptoms","response","get","data","getDiseases","predictDisease","symptoms","additionalSymptoms","notes","post","additional_symptoms","getPredictions","getDashboard","getHealthRecords"],"sources":["/Users/admin/Desktop/MediXpert/medixpert_frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  }\n});\n\n// Add a request interceptor to include the token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    // Ensure OPTIONS requests are properly handled\n    if (config.method === 'options') {\n      config.headers['Access-Control-Request-Method'] = 'GET,POST,PUT,DELETE,OPTIONS';\n      config.headers['Access-Control-Request-Headers'] = 'Content-Type,Authorization';\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport const apiService = {\n  // Auth related\n  setAuthToken(token) {\n    if (token) {\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  },\n\n  // Symptoms\n  async getSymptoms() {\n    const response = await api.get('/symptoms/');\n    return response.data;\n  },\n\n  // Diseases\n  async getDiseases() {\n    const response = await api.get('/diseases/');\n    return response.data;\n  },\n\n  // Predictions\n  async predictDisease(symptoms, additionalSymptoms = '', notes = '') {\n    const response = await api.post('/predict/', {\n      symptoms,\n      additional_symptoms: additionalSymptoms,\n      notes\n    });\n    return response.data;\n  },\n\n  async getPredictions() {\n    const response = await api.get('/predictions/');\n    return response.data;\n  },\n\n  // Dashboard\n  async getDashboard() {\n    const response = await api.get('/dashboard/');\n    return response.data;\n  },\n\n  // Health Records\n  async getHealthRecords() {\n    const response = await api.get('/health-records/');\n    return response.data;\n  }\n};\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,eAAe,EAAE,KAAK;EACtBC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA;EACA,IAAID,MAAM,CAACK,MAAM,KAAK,SAAS,EAAE;IAC/BL,MAAM,CAACJ,OAAO,CAAC,+BAA+B,CAAC,GAAG,6BAA6B;IAC/EI,MAAM,CAACJ,OAAO,CAAC,gCAAgC,CAAC,GAAG,4BAA4B;EACjF;EACA,OAAOI,MAAM;AACf,CAAC,EACAM,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMG,UAAU,GAAG;EACxB;EACAC,YAAYA,CAACT,KAAK,EAAE;IAClB,IAAIA,KAAK,EAAE;MACTC,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEV,KAAK,CAAC;IACtC,CAAC,MAAM;MACLC,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAClC;EACF,CAAC;EAED;EACA,MAAMC,WAAWA,CAAA,EAAG;IAClB,MAAMC,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,GAAG,CAAC,YAAY,CAAC;IAC5C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMC,WAAWA,CAAA,EAAG;IAClB,MAAMH,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,GAAG,CAAC,YAAY,CAAC;IAC5C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAME,cAAcA,CAACC,QAAQ,EAAEC,kBAAkB,GAAG,EAAE,EAAEC,KAAK,GAAG,EAAE,EAAE;IAClE,MAAMP,QAAQ,GAAG,MAAMtB,GAAG,CAAC8B,IAAI,CAAC,WAAW,EAAE;MAC3CH,QAAQ;MACRI,mBAAmB,EAAEH,kBAAkB;MACvCC;IACF,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMQ,cAAcA,CAAA,EAAG;IACrB,MAAMV,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,GAAG,CAAC,eAAe,CAAC;IAC/C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMS,YAAYA,CAAA,EAAG;IACnB,MAAMX,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,GAAG,CAAC,aAAa,CAAC;IAC7C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMU,gBAAgBA,CAAA,EAAG;IACvB,MAAMZ,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOD,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}